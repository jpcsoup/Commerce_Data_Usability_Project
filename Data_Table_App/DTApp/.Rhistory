?rand
?rrunif
?runif
getwd()
df <- read.csv("/Users/jcampbell/Desktop/JIRA/Screen_Resolution.csv")
View(df)
X <- as.matrix(df[,3:6])
View(X)
?dist
k=5
cores <- matrix(NA, nrow = k, ncol = ncol(X))
for(i in 1:ncol(X)){
cores[,i] <- runif(k, min = min(cores[,i], max = max(cores[,i])))
}
for(i in 1:ncol(X)){
cores[,i] <- runif(k, min = min(cores[,i]), max = max(cores[,i]))
}
for(i in 1:ncol(X)){
cores[,i] <- runif(k, min = min(X[,i]), max = max(X[,i]))
}
cores
dist1 <- rowsums((X-core[1,])^2)
dist1 <- rowSums((X-core[1,])^2)
dist1 <- rowSums((X-cores[1,])^2)
dist1
c_dist <- rowSums((X-cores[1,])^2)
source("/Users/jcampbell/Documents/Algorithms/KMeans.R")
source("/Users/jcampbell/Documents/Algorithms/KMeans.R")
?list
source("/Users/jcampbell/Documents/Algorithms/KMeans.R")
for(i in 1:10){
centers <- k.assign(X, 5)
centers$cores
}
source("/Users/jcampbell/Documents/Algorithms/KMeans.R")
for(i in 1:10){
centers <- k.assign(X, 5)
centers$cores
}
cores <- matrix(NA, nrow = k, ncol = ncol(X))
for(i in 1:ncol(X)){
cores[,i] <- runif(k, min = min(X[,i]), max = max(X[,i]))
}
assign <- rep(1, nrow(X))
for(i in 2:k){
assign <- ifelse(c_dist > rowSums((X-cores[i,])^2), i, assign)
c_dist <- ifelse(c_dist > rowSums((X-cores[i,])^2), rowSums((X-cores[i,])^2), c_dist)
}
stable <- 0
runs <- 0
stable < 3 & runs < runlim
stable < 3 & runs < 50
for(i in 1:k){
cores[i,] <- mean(X[assign==i,], na.rm = TRUE)
}
cores
assign1 <- assign
c_dist <- rowSums((X-cores[1,])^2)
for(i in 2:k){
assign1 <- ifelse(c_dist > rowSums((X-cores[i,])^2), i, assign)
c_dist <- ifelse(c_dist > rowSums((X-cores[i,])^2), rowSums((X-cores[i,])^2), c_dist)
}
sum(assign1 != assign)==0
if(sum(assign1 != assign)==0){
stable <- stable + 1
} else{
stable <- 0
}
assign <- assign1
runs <- runs + 1
while(stable < 3 & runs < 50) {
# Recompute core centers
for(i in 1:k){
cores[i,] <- mean(X[assign==i,], na.rm = TRUE)
}
# Assign each point to the cluster center
assign1 <- assign
c_dist <- rowSums((X-cores[1,])^2)
for(i in 2:k){
assign1 <- ifelse(c_dist > rowSums((X-cores[i,])^2), i, assign)
c_dist <- ifelse(c_dist > rowSums((X-cores[i,])^2), rowSums((X-cores[i,])^2), c_dist)
}
if(sum(assign1 != assign)==0){
stable <- stable + 1
} else{
stable <- 0
}
assign <- assign1
runs <- runs + 1
}
cores
cores <- matrix(NA, nrow = k, ncol = ncol(X))
for(i in 1:ncol(X)){
cores[,i] <- runif(k, min = min(X[,i]), max = max(X[,i]))
}
# Assign each point to the cluster center
assign <- rep(1, nrow(X))
c_dist <- rowSums((X-cores[1,])^2)
for(i in 2:k){
assign <- ifelse(c_dist > rowSums((X-cores[i,])^2), i, assign)
c_dist <- ifelse(c_dist > rowSums((X-cores[i,])^2), rowSums((X-cores[i,])^2), c_dist)
}
# Iterate until convergence
stable <- 0
runs <- 0
cores
mean(X[assign==1,], na.rm = TRUE)
colMeans(X[assign==1,], na.rm = TRUE)
source("/Users/jcampbell/Documents/Algorithms/KMeans.R")
for(i in 1:10){
centers <- k.assign(X, 5)
centers$cores
}
cores <- matrix(NA, nrow = k, ncol = ncol(X))
for(i in 1:ncol(X)){
cores[,i] <- runif(k, min = min(X[,i]), max = max(X[,i]))
}
# Assign each point to the cluster center
assign <- rep(1, nrow(X))
c_dist <- rowSums((X-cores[1,])^2)
for(i in 2:k){
assign <- ifelse(c_dist > rowSums((X-cores[i,])^2), i, assign)
c_dist <- ifelse(c_dist > rowSums((X-cores[i,])^2), rowSums((X-cores[i,])^2), c_dist)
}
# Iterate until convergence
stable <- 0
runs <- 0
while(stable < 3 & runs < 50) {
# Recompute core centers
for(i in 1:k){
cores[i,] <- colMeans(X[assign==i,], na.rm = TRUE)
}
# Assign each point to the cluster center
assign1 <- assign
c_dist <- rowSums((X-cores[1,])^2)
for(i in 2:k){
assign1 <- ifelse(c_dist > rowSums((X-cores[i,])^2), i, assign)
c_dist <- ifelse(c_dist > rowSums((X-cores[i,])^2), rowSums((X-cores[i,])^2), c_dist)
}
if(sum(assign1 != assign)==0){
stable <- stable + 1
} else{
stable <- 0
}
assign <- assign1
runs <- runs + 1
}
cores
colMeans(X[assign==1,])
colMeans(X[assign==1,], na.rm = TRUE)
colMeans(X[assign==1,], na.rm = TRUE)
table(assign)
sum(assign==1)
source("/Users/jcampbell/Documents/Algorithms/KMeans.R")
for(i in 1:10){
centers <- k.assign(X, 5)
centers$cores
}
for(i in 1:10){
centers <- k.assign(X, 5)
print(centers$cores)
}
centers
source("/Users/jcampbell/Documents/Algorithms/KMeans.R")
for(i in 1:10){
centers <- k.assign(X, 5)
print(centers$cores)
}
centers <- k.assign(X, 5)
for(i in 1:50){
centers_i <- k.assign(X, 5)
if(centers$MSE > centers_i$MSE){
centers <- centers_i
}
}
source("/Users/jcampbell/Documents/Algorithms/KMeans.R")
centers <- k.assign(X, 5)
for(i in 1:50){
centers_i <- k.assign(X, 5)
if(centers$MSE > centers_i$MSE){
centers <- centers_i
}
}
centers$cores
df$group <- centers$assign
write.csv(df, "/Users/jcampbell/Desktop/JIRA/grouped.csv")
source("/Users/jcampbell/Documents/Algorithms/KMeans.R")
centers <- k.assign(X, 5)
for(i in 1:50){
centers_i <- k.assign(X, 5)
if(centers$MSE > centers_i$MSE){
centers <- centers_i
}
}
df$group <- centers$assign
table(df$group)
write.csv(df, "/Users/jcampbell/Desktop/JIRA/grouped.csv")
getwd()
setwd("~/Desktop/Commerce_Data_Usability_Project/Data_Table_App/DTApp")
install.packages("DT")
shiny::runApp()
shiny::runApp()
shiny::runApp()
